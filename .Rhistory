tinytex::tinytex_root()
tinytex::install_tinytex(force = TRUE)
setwd("D:/Users/froze/OneDrive/Documents/GitHub/QRM2")
knitr::opts_chunk$set(echo = TRUE)
z2 <- qnorm(0.975)
year_profits <- movies1 %>%
group_by(release_year) %>%
summarize(mean_profits = mean(profits, na.rm = TRUE),
error = sd(profits, na.rm = TRUE)/sqrt(n()),
.groups = "drop") %>%
mutate(lower = mean_profits - z2*error,
higher = mean_profits + z2*error)
z2 <- qnorm(0.975)
year_profits <- movies1 %>%
group_by(release_year) %>%
summarize(mean_profits = mean(profits, na.rm = TRUE),
error = sd(profits, na.rm = TRUE)/sqrt(n()),
.groups = "drop") %>%
mutate(lower = mean_profits - z2*error,
higher = mean_profits + z2*error)
knitr::opts_chunk$set(echo = TRUE)
movies <- readr::read_tsv("Datasets/movies1.tsv")
library(tidyverse)
actor_counts <- table(movies$first_actor)
sorted_actors <- sort(actor_counts, decreasing = TRUE)
top_actor <- names(sort(table(movies$first_actor), decreasing = TRUE))[1]
cat(top_actor)
top_actor_movies <- movies[movies$first_actor == top_actor, ]
actor_avg_revenue <- mean(top_actor_movies$revenue, na.rm = TRUE)
overall_avg_revenue <- mean(movies$revenue, na.rm = TRUE)
cat("The average revenue of the movie in which Bruce Willis plays:", actor_avg_revenue, "\n")
cat("The average revenue of the movies in the dataset:", overall_avg_revenue, "\n")
if(actor_avg_revenue > overall_avg_revenue) {
cat("The revenue of his movies lies above the revenue of an average movie.\n")
} else {
cat("The revenue of his movies is below the revenue of an average movie.\n")
}
sum(movies$first_actor == "Bruce Willis", na.rm = TRUE)
movies$profits <- movies$revenue - movies$budget
movies$profits_millions <- movies$profits/1000000
sample_variance <- var(movies$profits_millions, na.rm = TRUE)
n <- sum(!is.na(movies$profits_millions))
population_variance <- sample_variance * (n-1)/n
cat("The variance of the variable profits:", population_variance, "\n")
movies$profits <- movies$revenue - movies$budget
movies$profits_millions <- movies$profits/1000000
sample_variance <- var(movies$profits_millions, na.rm = TRUE)
n <- sum(!is.na(movies$profits_millions))
population_variance <- sample_variance * (n-1)/n
cat("The variance of the variable profits:", population_variance, "\n")
set.seed(321)
movies_sample <- movies %>% sample_n(25)
variance_sample <- var(movies_sample$profits_millions, na.rm = TRUE)
cat("Sample profits variance:", variance_sample, "\n")
cat("The population profits variance:", population_variance, "\n")
if(variance_sample > population_variance) {
cat("The sample profits variance is larger than the population profits variance.\n")
} else {
cat("The sample profits variance is smaller than the population profits variance.\n")
}
sample_vars <- numeric(100)
set.seed(321)
for(i in 1:100) {
sample_i <- movies %>% sample_n(25)
sample_vars[i] <- var(sample_i$profits_millions, na.rm = TRUE)
}
cat(head(sample_vars))
mean_sample_vars <- mean(sample_vars, na.rm = TRUE)
sd_sample_vars <- sd(sample_vars, na.rm = TRUE)
cat("Mean of sample variances:", mean_sample_vars, "\n")
cat("Standard deviation of sample variances:", sd_sample_vars, "\n")
hist(sample_vars,
main = "Distribution of Sample Variances",
xlab = "Sample Variance of Profits")
thriller <- movies %>%
filter(genre == "Thriller", !is.na(runtime))
n <- nrow(thriller)
variable <- var(thriller$runtime)
alpha <- 0.01
CI <- (n -1)*variable / qchisq(c(0.995, 0.005), df = n -1)
CI
mean_thriller_runtime <- mean(thriller$runtime)
error <- sqrt(variable / n)
z <- qnorm(0.995)
CI_mean <- mean_thriller_runtime + c(-1,1)*z*error
CI_mean
sigma_hypo <- 500
test_hypo <- (n - 1)*variable / sigma_hypo
alpha <- 0.05
critical_val <- qchisq(c(alpha/2 , 1 - alpha/2), df = n-1)
test_hypo
critical_val
ggplot(thriller, aes(x = runtime)) +
geom_histogram(bins = 20, fill = "lightblue", color = "black") +
labs(title = "Thriller Runtimes Histogram")
movies <- movies %>%
mutate(vote_average_rounded = round(vote_average))
ggplot(movies, aes(x = vote_average_rounded)) +
geom_histogram(binwidth = 1, fill = "lightblue", color = "black") +
labs(title = "Rounded Vote Averages Histogram")
rating_profits <- movies %>%
group_by(vote_average_rounded) %>%
summarize(mean_profits = mean(profits, na.rm = TRUE))
rating_profits
ggplot(rating_profits, aes(x = vote_average_rounded, y = mean_profits)) +
geom_point(size = 2, color = "black") +
labs(title = "Mean Profits by Rating",
x = "Vote Average Rounded",
y = "Mean Profits")
